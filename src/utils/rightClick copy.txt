export function createContextMenu() {
    //   the parent menu
    chrome.contextMenus.create({
      id: "vdxViewer",
      title: "VDX Viewer",
      contexts: ["page"]
    });
  
    //   child menu
    chrome.contextMenus.create({
      id: "customVDXView",
      title: "Custom VDX View",
      parentId: "vdxViewer",
      contexts: ["page"]
    });
  
    console.log("Context menus created successfully!");
  
    // Handle right-click menu click
    chrome.contextMenus.onClicked.addListener((info, tab) => {
      if (info.menuItemId === "customVDXView") {
        if (tab?.url?.includes("vdx.tv") || tab?.url?.includes("creative.vdx.tv")) {
          const customURL = "https://creative.exponential.com/creative/devshowcase/VVT/customView1.html";
         } else {
            chrome.notifications.create(new Date().getTime().toString(), {
                type: "basic",
                iconUrl: "icons/icon128.png",
                title: "Showcase Page Alert",
                message: "This feature is available for VDX Showcase pages only."
              });
              
        }
        /////

 
 
       let _tempDeskInf=   buildLPurl( adUnits);
      
       console.info(adUnits);
      
         console.log("_tempDeskInf    :: ",_tempDeskInf)
         chrome.tabs.create({ url: _tempDeskInf });

         ///////
      }
    });
  }
  

   // ✅   Tab Update Listener  This will be called when page will load or reload...
   chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
    if (changeInfo.status === "complete") {
      console.log("Tab Refreshed");
     // resetVarsNmore();
      getAllAdsInfo(tab);
     // checkWebAddress(tab);
    }
  });


// ✅ Optimized Function to Get All Information for VDX Viewer Tool
async function getAllAdsInfo(tab: chrome.tabs.Tab) {
    if (!tab.url) return;
    
    const isVVT = tab.url.includes("/VVT/customView");
    const isCreativeVDX = tab.url.includes("creative.vdx.tv/") || tab.url.includes("vdx.exponential.com");
  
    // Dynamically Muting Tab Sound for VVT page::
    if (isVVT) {
      chrome.tabs.query({ lastFocusedWindow: true, active: true }, (tabs) => {
        tabs.forEach((t) => t.mutedInfo && chrome.tabs.update(t.id!, { muted: true }));
      });
    }
  
    if (!isCreativeVDX) return;

    console.log("Loading... demo pages", tab.url);
  
    if (!tab.url.includes("#")) return;
  
    // CUSTOM SHOWCASE PAGE CHECK
    if (tab.url.includes("creative.vdx.tv/?json=http")) {
      const jsonUrl = tab.url.split("json=")[1].split("#")[0];
      console.info("Custom showcase page found", jsonUrl);
      
      try {
        const response = await fetch(jsonUrl);
        const data = await response.json();
        let result: any = { data };
        /// extractAdUnitInfoData(result, true);
       // console.log("extractAdUnitInfoData ", result )
      } catch (error: any) {
        console.error("Error fetching JSON:", error?.message ?? error);
      }
      return;
    }//*
  
    const _id = tab.url.split("#")[1].split("/")[0];
   
    try {
      const response = await fetch("https://expotask-showcase.exponential.com/service/demopages", {
        method: "POST",
        mode: "cors",
        cache: "no-cache",
        credentials: "same-origin",
        headers: { "Content-Type": "application/json" },
        redirect: "follow",
        referrerPolicy: "no-referrer",
        body: JSON.stringify({ method_name: "getdata_bundle_showcase", hash: _id }), // ◀️ passing id here
      });
      
       const data = await response.json();
       console.log("data.status of demo pages ", data.status, "data::", data);
      
      if (!data.status) {
        console.log("id for extractAdUnitInfoDataForSE", _id);

           extractAdUnitInfoDataForSE(_id); // ◀️ passing id here for another method
        // _isThisSingleExecution = true;
      } else {
        console.log("data for extractAdUnitInfoData_demo pages_ ", data);
          ParseAdUnitInfoData(data, false);
        // _isThisSingleExecution = false;
      }
    } catch (error: any) {
      console.info(null, error?.message ?? error);
    }
  }
  /////////

  //
  async function extractAdUnitInfoDataForSE(_id: string) {
    try {
      console.info(`Fetching data from https://creative.vdx.tv/vdxstudio/projects/${_id}`);
      
      const response = await fetch(`https://creative.vdx.tv/vdxstudio/projects/${_id}/demopages?published=true`);
      const data = await response.json();
  
       console.info("Data for extractAdUnitInfoDataForSE:: ", data);
       
         ParseAdUnitInfoData(data, false);

    } catch (error) {
      console.error("Error fetching data:", error);
    }
  }
  
  // Define the structure for ad unit data
 
  interface AdUnit {
    mockid: string;
    etid: string;
    ad_size: string;
    type: string;
  }
  
  let _isCCRV = false;
  let latestRevision = "";
  let latestVariation = "";
  
  // Define adUnits object with proper keys

  let adUnits: Record<string, AdUnit[]> = {
    VdxConnectDesktopExpandable: [],
    VdxConnectDesktopInframe: [],
    VdxConnectMobileExpandable: [],
    VdxConnectMobileInframe: [],
    desktopInstream: [],  
    mobileInstream: [],   
    CTV: []
  };
  
  function ParseAdUnitInfoData(result: any, isCustShowcase: boolean) {
    if (!result?.data) return;

    console.info("ParseAdUnitInfoData:: CCRV check", result.data.isCCRV);

    _isCCRV = result.data.isCCRV === true;
    latestRevision = _isCCRV ? result.data.latestRevision : "";
    latestVariation = _isCCRV ? result.data.latestVariation : "";

    if (_isCCRV) console.info("This is a CCRV unit.", latestRevision, latestVariation);

    // Function to generate ad unit entry
    function createAdUnit(entry: any, type: string): AdUnit {
        return {
            mockid: entry.mockid ?? entry.mediaDataID,
            etid: entry._creative_request_id,
            ad_size: entry.ad_size + (isCustShowcase ? `_${entry.type}` : ""),
            type
        };
    }

    // Mapping product names to ad unit types
    const mapping: Record<string, string> = {
        VdxConnectDesktopExpandable: "VdxConnectDesktopExpandable",
        VdxDesktopExpandable: "VdxConnectDesktopExpandable",
        VdxConnectDesktopInframe: "VdxConnectDesktopInframe",
        VdxDesktopInframe: "VdxConnectDesktopInframe",
        VdxConnectMobileExpandable: "VdxConnectMobileExpandable",
        VdxMobileExpandable: "VdxConnectMobileExpandable",
        VdxConnectMobileInframe: "VdxConnectMobileInframe",
        VdxMobileInframe: "VdxConnectMobileInframe",
        VdxConnectInstream: "desktopInstream",
        VdxConnectMobileInstream: "mobileInstream",
        VDXConnectTV: "CTV"
    };

 
    result.data.urls.forEach((entry: any) => {
        const type = mapping[entry.product];
        if (type) {
            if (!adUnits[type]) {
                adUnits[type] = [];
            }
            adUnits[type].push(createAdUnit(entry, type));
        }
    });

    // Storing additional info separately
    (adUnits as any)["OtherInfo"] = {
        latestRevision: result.data.latestRevision,
        latestVariation: result.data.latestVariation,
        isBokehModeEnabled: String(result.data.isBokehModeEnabled),
        isCCRV: String(result.data.isCCRV),
        updated: result.data.updated,
        version: result.data.version,
        bundle_type: result.data.bundle_type
    };

    console.log("Collected Ad Units Data:", JSON.stringify(adUnits, null, 2));

    return adUnits;
}


  

  //// BUILD URL
 
  ///
  function buildLPurl(data: any): string {
    console.log('data for make url ', data);

    const baseUrl = "https://creative.exponential.com/creative/devshowcase/VVT/customView1.1.html";

    const adGroups = {
        DExp: "VdxConnectDesktopExpandable",
        DInf: "VdxConnectDesktopInframe",
        VCmi: "VdxConnectMobileInframe",
        VCme: "VdxConnectMobileExpandable",
        CTV: "CTV"
    };

    const params: Record<string, string[]> = {};

    // Loop through each ad unit type and collect mockid + ad_size
    for (const key of Object.keys(adGroups)) {
        const type = adGroups[key as keyof typeof adGroups];
        if (data[type] && data[type].length > 0) {
            params[key] = data[type].map((ad: any) => `${ad.mockid}_${ad.ad_size}`);
        } else {
            params[key] = ["0"]; // Set to "0" if empty
        }
    }

    // Construct query parameters
    const queryParams = new URLSearchParams();

    for (const key of Object.keys(params)) {
        const values = params[key as keyof typeof params];
        queryParams.append(key, values.join(","));
    }

    // Add Other Info parameters
    if (data["OtherInfo"]) {
        const otherInfo = data["OtherInfo"];
        queryParams.append("isCCRV", String(otherInfo.isCCRV));
        queryParams.append("latestRevision", String(otherInfo.latestRevision));
        queryParams.append("latestVariation", String(otherInfo.latestVariation));
    }

    return `${baseUrl}?${queryParams.toString()}`;
}

